@page "/"
@using SentimentAnalysis.Core.Interfaces
@using SentimentAnalysis.Core.Models
@inject AzureSentimentAnalyzer SentimentAnalyzer
@inject ISocialMediaMonitor SocialMediaMonitor

<h1>Analiza Sentymentu w Mediach Społecznościowych</h1>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Parametry analizy</h5>
                <div class="form-group mb-3">
                    <label for="searchPhrase">Fraza do monitorowania:</label>
                    <input type="text" class="form-control" id="searchPhrase" @bind="searchPhrase" placeholder="np. Buty Nike" />
                </div>
                <div class="form-group mb-3">
                    <label for="dateRange">Zakres dat:</label>
                    <select class="form-control" id="dateRange" @bind="selectedDateRange">
                        <option value="1">Ostatnie 24 godziny</option>
                        <option value="7">Ostatni tydzień</option>
                        <option value="30">Ostatni miesiąc</option>
                        <option value="90">Ostatnie 3 miesiące</option>
                    </select>
                </div>
                <div class="form-group mb-3">
                    <label for="source">Źródło danych:</label>
                    <select class="form-control" id="source" @bind="selectedSource">
                        <option value="all">Wszystkie źródła</option>
                        <option value="twitter">Twitter</option>
                        <option value="facebook">Facebook</option>
                    </select>
                </div>
                <button class="btn btn-primary" @onclick="AnalyzeSentiment">Analizuj</button>
            </div>
        </div>
    </div>
    
    @if (isAnalyzing)
    {
        <div class="col-md-6">
            <div class="card">
                <div class="card-body text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Analizowanie...</span>
                    </div>
                    <p class="mt-2">Trwa analiza danych...</p>
                </div>
            </div>
        </div>
    }
</div>

@if (analysisResult != null)
{
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Wyniki analizy sentymentu dla frazy "@searchPhrase"</h5>
                    <div class="sentiment-summary mt-4">
                        <div class="sentiment-label">Pozytywne:</div>
                        <div class="progress sentiment-progress mb-3">
                            <div class="progress-bar bg-success d-flex justify-content-center align-items-center" 
                                 role="progressbar"
                                 style="width: @(analysisResult.PositivePercentage)%">
                                @analysisResult.PositivePercentage%
                            </div>
                        </div>

                        <div class="sentiment-label">Neutralne:</div>
                        <div class="progress sentiment-progress mb-3">
                            <div class="progress-bar bg-warning d-flex justify-content-center align-items-center" 
                                 role="progressbar"
                                 style="width: @(analysisResult.NeutralPercentage)%">
                                @analysisResult.NeutralPercentage%
                            </div>
                        </div>

                        <div class="sentiment-label">Negatywne:</div>
                        <div class="progress sentiment-progress mb-3">
                            <div class="progress-bar bg-danger d-flex justify-content-center align-items-center" 
                                 role="progressbar"
                                 style="width: @(analysisResult.NegativePercentage)%">
                                @analysisResult.NegativePercentage%
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        <h6>Statystyki:</h6>
                        <ul>
                            <li>Przeanalizowane wpisy: @analysisResult.TotalPosts</li>
                            <li>Okres analizy: @analysisResult.DateRange</li>
                            <li>Źródła: @analysisResult.Sources</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Przykładowe wpisy</h5>
                    <div class="row">
                        @foreach (var post in analysisResult.SamplePosts)
                        {
                            <div class="col-md-6 mb-3">
                                <div class="card @GetSentimentCardClass(post.Sentiment, post.Content)">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between">
                                            <small class="text-muted">@post.Source</small>
                                            <small class="text-muted">@post.Date</small>
                                        </div>
                                        <p class="mt-2 mb-2">@post.Content</p>
                                        <div class="sentiment-indicator">
                                            <small>
                                                Sentyment: @GetSentimentType(post.Sentiment, post.Content)
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string searchPhrase = "";
    private int selectedDateRange = 7;
    private string selectedSource = "all";
    private bool isAnalyzing = false;
    private AnalysisResult? analysisResult;

    private class SocialMediaPost
    {
        public string Content { get; set; } = string.Empty;
        public string Source { get; set; } = string.Empty;
        public string Date { get; set; } = string.Empty;
        public SentimentScore Sentiment { get; set; } = null!;
    }

    private class AnalysisResult
    {
        public double PositivePercentage { get; set; }
        public double NeutralPercentage { get; set; }
        public double NegativePercentage { get; set; }
        public int TotalPosts { get; set; }
        public string DateRange { get; set; } = string.Empty;
        public string Sources { get; set; } = string.Empty;
        public List<SocialMediaPost> SamplePosts { get; set; } = new();
    }

    private string GetSentimentType(SentimentScore sentiment, string content)
    {
        // Lista fraz charakterystycznych dla opinii neutralnych
        var neutralPhrases = new[]
        {
            "są ok",
            "mogłyby być lepsze",
            "przeciętna",
            "trudno powiedzieć",
            "zwykły produkt",
            "nic specjalnego",
            "mieszane uczucia",
            "plusy i minusy",
            "standardowy",
            "spełnia swoją funkcję"
        };

        // Sprawdzamy czy w treści występują charakterystyczne frazy neutralne
        if (neutralPhrases.Any(phrase => content.ToLower().Contains(phrase)))
            return "Neutralna";

        // Jeśli komponent neutralny jest znaczący (>=30%) lub negatywny i pozytywny są zbliżone
        if (sentiment.Neutral >= 0.3 || Math.Abs(sentiment.Positive - sentiment.Negative) < 0.15)
            return "Neutralna";

        // Jeśli pozytywny jest wyraźnie większy od pozostałych
        if (sentiment.Positive > sentiment.Negative && sentiment.Positive > sentiment.Neutral)
            return "Pozytywna";

        // Jeśli negatywny jest wyraźnie większy od pozostałych
        if (sentiment.Negative > sentiment.Positive && sentiment.Negative > sentiment.Neutral)
            return "Negatywna";

        // W przypadku wątpliwości klasyfikujemy jako neutralne
        return "Neutralna";
    }

    private string GetSentimentCardClass(SentimentScore sentiment, string content)
    {
        var sentimentType = GetSentimentType(sentiment, content);
        return sentimentType switch
        {
            "Pozytywna" => "border-success",
            "Negatywna" => "border-danger",
            _ => "border-warning"
        };
    }

    private async Task AnalyzeSentiment()
    {
        if (string.IsNullOrWhiteSpace(searchPhrase)) return;

        isAnalyzing = true;
        try
        {
            // Pobierz posty z monitora mediów społecznościowych
            var socialMediaPosts = await SocialMediaMonitor.GetPostsAsync(searchPhrase, selectedDateRange, selectedSource);
            var posts = new List<SocialMediaPost>();

            foreach (var post in socialMediaPosts)
            {
                var sentiment = await SentimentAnalyzer.AnalyzeSentimentAsync(post.Content);
                posts.Add(new SocialMediaPost
                {
                    Content = post.Content,
                    Source = post.Source,
                    Date = post.CreatedAt.ToString("dd.MM.yyyy HH:mm"),
                    Sentiment = sentiment
                });
            }

            // Klasyfikacja postów
            var positiveCount = posts.Count(p => GetSentimentType(p.Sentiment, p.Content) == "Pozytywna");
            var neutralCount = posts.Count(p => GetSentimentType(p.Sentiment, p.Content) == "Neutralna");
            var negativeCount = posts.Count(p => GetSentimentType(p.Sentiment, p.Content) == "Negatywna");

            // Obliczanie procentów
            var total = posts.Count;
            var positivePercentage = (int)Math.Round((double)positiveCount / total * 100);
            var neutralPercentage = (int)Math.Round((double)neutralCount / total * 100);
            var negativePercentage = (int)Math.Round((double)negativeCount / total * 100);

            // Korekta sumy do 100%
            var sum = positivePercentage + neutralPercentage + negativePercentage;
            if (sum != 100)
            {
                var diff = 100 - sum;
                if (positiveCount >= negativeCount && positiveCount >= neutralCount)
                    positivePercentage += diff;
                else if (negativeCount >= positiveCount && negativeCount >= neutralCount)
                    negativePercentage += diff;
                else
                    neutralPercentage += diff;
            }

            analysisResult = new AnalysisResult
            {
                PositivePercentage = positivePercentage,
                NeutralPercentage = neutralPercentage,
                NegativePercentage = negativePercentage,
                TotalPosts = posts.Count,
                DateRange = $"Ostatnie {selectedDateRange} dni",
                Sources = selectedSource == "all" ? "Twitter, Facebook" : selectedSource,
                SamplePosts = posts
            };
        }
        catch (Exception ex)
        {
            // Możemy dodać obsługę błędów na UI
            Console.WriteLine($"Error during analysis: {ex.Message}");
        }
        finally
        {
            isAnalyzing = false;
        }
    }

    private async Task AnalyzeText()
    {
        // Dodajmy logi
        Console.WriteLine("\n=== Starting Social Media Analysis ===");
        Console.WriteLine($"Search phrase: {searchPhrase}");
        Console.WriteLine($"Days back: {selectedDateRange}");
        Console.WriteLine($"Source: {selectedSource}");

        try 
        {
            var posts = await SocialMediaMonitor.GetPostsAsync(searchPhrase, selectedDateRange, selectedSource);
            // ... reszta kodu ...
        }
        catch (Exception ex)
        {
            Console.WriteLine($"\n=== Error in Index.razor ===");
            Console.WriteLine($"Error: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            Console.WriteLine("=== Error Details End ===\n");
        }
    }
}

<style>
    .sentiment-summary {
        max-width: 100%;
    }
    
    .sentiment-progress {
        height: 40px !important;
        background-color: #f8f9fa;
        font-size: 1.1rem;
        display: flex;
        overflow: hidden;
        border-radius: 0.25rem;
    }
    
    .sentiment-progress .progress-bar {
        display: flex;
        flex-direction: column;
        justify-content: center;
        overflow: hidden;
        color: #fff;
        text-align: center;
        white-space: nowrap;
        transition: width .6s ease;
        font-weight: bold;
    }

    .sentiment-indicator {
        margin-top: 10px;
        padding-top: 10px;
        border-top: 1px solid #eee;
    }
</style>
